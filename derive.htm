<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
        <title>Data.Derive: A User Manual</title>
        <style type="text/css">
pre {
    border: 2px solid gray;
    padding: 1px;
    padding-left: 5px;
    margin-left: 10px;
    background-color: #eee;
}

pre.define {
    background-color: #ffb;
    border-color: #cc0;
}

body {
    font-family: sans-serif;
}

h1, h2, h3 {
    font-family: serif;
}

h1 {
    color: rgb(23,54,93);
    border-bottom: 1px solid rgb(79,129,189);
    padding-bottom: 2px;
    font-variant: small-caps;
    text-align: center;
}

a {
    color: rgb(54,95,145);
}

h2 {
    color: rgb(54,95,145);
}

h3 {
    color: rgb(79,129,189);
}
        </style>
    </head>
    <body>

<h1>Data.Derive: A User Manual</h1>

<p style="text-align:right;margin-bottom:25px;">
    by <a href="http://community.haskell.org/~ndm/">Neil Mitchell</a>
</p>

<p>
    Data.Derive is a library and a tool for deriving instances for Haskell programs. It is designed to work with custom derivations, SYB and Template Haskell mechanisms. The tool requires GHC, but the generated code is portable to all compilers. We see this tool as a competitor to <a href="http://repetae.net/~john/computer/haskell/DrIFT/">DrIFT</a>.
</p>
<p>
    This document proceeds as follows:
</p>
<ol>
    <li>Obtaining and Installing Data.Derive</li>
    <li>Supported Derivations</li>
    <li>Using the Derive Program</li>
    <li>Using Template Haskell Derivations</li>
    <li>Writing a New Derivation</li>
</ol>

<h3>Acknowledgements</h3>

<p>
    Thanks to everyone who has submitted patches and given assistance, including: Twan van Laarhoven, Spencer Janssen, Andrea Vezzosi, Samuel Bronson, Joel Raymont, Benedikt Huber, Stefan O'Rear.
</p>


<h2>Obtaining and Installing Data.Derive</h2>

<p>
	Data.Derive is available using <a href="http://darcs.net/">darcs</a>:
</p>
<pre>
darcs get --partial <a href="http://community.haskell.org/~ndm/darcs/derive">http://community.haskell.org/~ndm/darcs/derive</a>
</pre>
<p>
	Install the program using the standard sequence of Cabal magic:
</p>
<pre>
cabal update
cabal install derive
</pre>


<h2>Supported Derivations</h2>

<p>
	Data.Derive is not limited to any prebuild set of derivations, see later for how to add your own. Out of the box, we provide instances for the following libraries.
</p>

<!--
-- GENERATED START
-->
<li><b><a href='http://hackage.haskell.org/'>Arbitrary</a></b> - from the library QuickCheck</li>
<li><b><a href='http://hackage.haskell.org/'>ArbitraryOld</a></b> - from the library QuickCheck-1</li>
<li><b><a href='http://hackage.haskell.org/'>Arities</a></b> - from the library derive</li>
<li><b><a href='http://hackage.haskell.org/'>Binary</a></b> - from the library binary</li>
<li><b><a href='http://hackage.haskell.org/'>BinaryDefer</a></b> - from the library binarydefer</li>
<li><b><a href='http://hackage.haskell.org/'>Bounded</a></b> - from the library base</li>
<li><b><a href='http://hackage.haskell.org/'>Data</a></b> - from the library base</li>
<li><b><a href='http://hackage.haskell.org/'>Default</a></b> - from the library derive</li>
<li><b><a href='http://hackage.haskell.org/'>Enum</a></b> - from the library base</li>
<li><b><a href='http://hackage.haskell.org/'>EnumCyclic</a></b> - from the library base</li>
<li><b><a href='http://hackage.haskell.org/'>Eq</a></b> - from the library base</li>
<li><b><a href='http://hackage.haskell.org/'>Fold</a></b> - from the library base</li>
<li><b><a href='http://hackage.haskell.org/'>Foldable</a></b> - from the library base</li>
<li><b><a href='http://hackage.haskell.org/'>From</a></b> - from the library base</li>
<li><b><a href='http://hackage.haskell.org/'>Functor</a></b> - from the library base</li>
<li><b><a href='http://hackage.haskell.org/'>Has</a></b> - from the library base</li>
<li><b><a href='http://hackage.haskell.org/'>Is</a></b> - from the library base</li>
<li><b><a href='http://hackage.haskell.org/'>LazySet</a></b> - from the library base</li>
<li><b><a href='http://hackage.haskell.org/'>Monoid</a></b> - from the library base</li>
<li><b><a href='http://hackage.haskell.org/'>NFData</a></b> - from the library base</li>
<li><b><a href='http://hackage.haskell.org/'>Ord</a></b> - from the library base</li>
<li><b><a href='http://hackage.haskell.org/'>PlateDirect</a></b> - from the library base</li>
<li><b><a href='http://hackage.haskell.org/'>PlateTypeable</a></b> - from the library uniplate</li>
<li><b><a href='http://hackage.haskell.org/'>Read</a></b> - from the library base</li>
<li><b><a href='http://hackage.haskell.org/'>Ref</a></b> - from the library base</li>
<li><b><a href='http://hackage.haskell.org/'>Serial</a></b> - from the library smallcheck</li>
<li><b><a href='http://hackage.haskell.org/'>Set</a></b> - from the library base</li>
<li><b><a href='http://hackage.haskell.org/'>Show</a></b> - from the library base</li>
<li><b><a href='http://hackage.haskell.org/'>Traversable</a></b> - from the library base</li>
<li><b><a href='http://hackage.haskell.org/'>TTypeable</a></b> - from the library base</li>
<li><b><a href='http://hackage.haskell.org/'>Typeable</a></b> - from the library base</li>
<li><b><a href='http://hackage.haskell.org/'>Uniplate</a></b> - from the library base</li>
<li><b><a href='http://hackage.haskell.org/'>Update</a></b> - from the library base</li>
<!--
-- GENERATED STOP
-->

<h2>Using the Derive program</h2>

<p>
	Let's imagine we've defined a data type:
</p>
<pre>
data Color = RGB Int Int Int
           | CMYK Int Int Int Int
           deriving (Eq, Show)
</pre>
<p>
	Now we wish to extend this to derive <tt>Binary</tt> and change to defining <tt>Eq</tt> using our library. To do this we simply add to the <tt>deriving</tt> clause.
</p>
<pre>
data Color = RGB Int Int Int
           | CMYK Int Int Int Int
           deriving (Show {-! Eq, Binary !-})
</pre>
<p>
	Now running <tt>derive</tt> on the program containing this code will generate appropriate instances. How do you combine these instances back into the code? There are various mechanisms supported.
</p>

<h3>Appending to the module</h3>

<p>
	One way is to append the text to the bottom of the module, this can be done by passing the <tt>--append</tt> flag. If this is done, Derive will generate the required instances and place them at the bottom of the file, along with a checksum. Do not modify these instances.
</p>

<h3>Using CPP</h3>

<p>
	One way is to use CPP. Ensure your compiler is set up for compiling with the C Pre Processor. For example:
</p>
<pre>
{-# OPTIONS_GHC -cpp #-}
{-# OPTIONS_DERIVE --output=file.h #-}

module ModuleName where

#include "file.h"
</pre>

<h3>Side-by-side Modules</h3>

<p>
	If you had Colour.Type, and wished to place the Binary instance in Colour.Binary, this can be done with:
</p>
<pre>
{-# OPTIONS_DERIVE --output=Binary.hs --module=Colour.Binary --import #-}
</pre>
<p>
	Here you ask for the output to go to a particular file, give a specific module name and import this module. This will only work if the data structure is exported non-abstractly.
</p>

<h2>Using Template Haskell Derivations</h2>

<p>
	One of Derive's major advantages over DrIFT is support for the <a href="http://www.haskell.org/th/">Template Haskell</a> (henceforth abbreviated "TH") system.  This allows Derive to be invoked automatically during the compilation process, and (because it occurs with full access to the renamer tables) transparently supports deriving across module boundaries.  The main disadvantage of TH-based deriving is that it is only portable to compilers that support TH; currently that is GHC only.
</p>

<p>
	To use the TH deriving system, with the same example as before:
</p>

<pre>
{-# LANGUAGE TemplateHaskell #-}
import Data.DeriveTH
import Data.Binary

data Color = RGB Int Int Int
           | CMYK Int Int Int Int
           deriving (Show)

$( derive makeEq ''Color )
$( derive makeBinary ''Color )
</pre>

<p>
	We need to tell the compiler to insert the instance using the TH <em>splice</em> construct, <tt>$( ... )</tt> (the spaces are optional).  The splice causes the compiler to run the function <tt>derive</tt> (exported from <tt>Data.DeriveTH</tt>), passing arguments <tt>makeFooBar</tt> and <tt>''Color</tt>.  The second argument deserves more explanation; it is a quoted symbol, somewhat like a quoted symbol in Lisp and with deliberately similar syntax.  (Two apostrophes are used to specify that this name is to be resolved as a type constructor; just <tt>'Color</tt> would look for a <i>data</i> constructor named <tt>Color</tt>.)
</p>

<h2>Writing a New Derivation</h2>

<p>
	There are two methods for writing a new derivation, guessing or coding. The guessing method is substantially easier if it will work for you, but is limited to derivations with the following properties:
</p>
<ul>
	<li>Inductive - each derivation must be similar to the previous one. <tt>Binary</tt> does not have this property as a 1 item derivation does not have a tag, but a 2 item derivation does.</li>
	<li>Not inductive on the type - it must be an instance for the constructors, not for the type. <tt>Typeable</tt> violates this property by inducting on the free variables in the data type.</li>
	<li>Not type based - the derivation must not change based on the types of the fields. <tt>Play</tt> and <tt>Functor</tt> both behave differently given differently typed fields.</li>
	<li>Not record based - the derivation must not change on record fields. <tt>Show</tt> outputs the fields, so this is not allowed.</li>
</ul>
<p>
	If however your instance does meet these properties, you can use derivation by guess. Many instances do meet these conditions, for examples see: <tt>Eq</tt>, <tt>Ord</tt>, <tt>Data</tt>, <tt>Serial</tt> etc. If however you need to code the derivation manually see examples such as <tt>Update</tt> and <tt>Functor</tt>.
</p>

    </body>
</html>
